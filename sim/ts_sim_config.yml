simulator: vcs
simulation_resolution: ps

check_elab_log: true

test_name_strategy: generic_parameter
test_name_generic: test_name

elab_options:
    vcs: "+warn=noDUP_PARM_ASSGN"

targets:

    rtl_ctu_can_fd:
        top_entity: ctu_can_fd_rtl.can_top_level
        source_list_files:
            - src/slf_rtl.yml

    tb_ctu_can_fd_rtl:
        top_entity: ctu_can_fd_tb.tb_top_ctu_can_fd
        source_list_files:
            - rtl_ctu_can_fd
            - test/slf_tb_dependencies_simple.yml
            - test/slf_tb_common.yml
            - test/slf_tb_top_simple.yml


    ###############################################################################################
    # Fast ASIC configuration
    ###############################################################################################
    tb_rtl_test_fast_asic:
        top_entity: ctu_can_fd_tb.tb_top_ctu_can_fd
        test_list_file: test/tlf_fast_asic.yml
        generics:
            # Test-bench configuration
            #log_level: info
            #randomize: false
            #seed: 0
            #debug: false
            test_type: feature
            iterations: 1
            timeout: 100 ms

            # DUT generics
            rx_buffer_size: 64
            txt_buffer_count: 8
            sup_filtA: true
            sup_filtB: true
            sup_filtC: true
            sup_range: true
            sup_traffic_ctrs: true
            sup_parity: true

            # C_TECH_ASIC
            target_technology: 0

            # DUT Bit timing settings
            # (Applies for compliance tests and feature tests!)
            cfg_brp: 2
            cfg_prop: 5
            cfg_ph_1: 7
            cfg_ph_2: 7
            cfg_sjw: 5

            cfg_brp_fd: 1
            cfg_prop_fd: 5
            cfg_ph_1_fd: 7
            cfg_ph_2_fd: 7
            cfg_sjw_fd: 5

            # Clock configuration
            # (Applies for compliance tests and feature tests!)
            cfg_sys_clk_period: 10 ns

            # Number of frames used from each dataset, 1000 means whole dataset
            # These take really long time, so we run only few frames here!
            reference_iterations: 10

        source_list_files:
            - tb_ctu_can_fd_rtl

    ###############################################################################################
    # Fast FPGA configuration
    ###############################################################################################
    tb_rtl_test_fast_fpga:
        top_entity: ctu_can_fd_tb.tb_top_ctu_can_fd
        test_list_file: test/tlf_fast_fpga.yml
        generics:
            #log_level: info
            #enable_psl: true
            #functional_coverage_report: false
            #code_coverage: false
            #error_tolerance: 0
            #randomize: true
            #seed: 0
            #debug: false
            test_type: feature
            iterations: 1
            timeout: 100 ms

            # DUT generics
            rx_buffer_size: 64
            txt_buffer_count: 8
            sup_filtA: true
            sup_filtB: true
            sup_filtC: true
            sup_range: true
            sup_traffic_ctrs: true
            sup_parity: true

            # C_TECH_FPGA
            target_technology: 1

            # DUT Bit timing settings
            # (Applies for compliance tests and feature tests!)
            cfg_brp: 2
            cfg_prop: 5
            cfg_ph_1: 7
            cfg_ph_2: 7
            cfg_sjw: 5

            cfg_brp_fd: 1
            cfg_prop_fd: 5
            cfg_ph_1_fd: 7
            cfg_ph_2_fd: 7
            cfg_sjw_fd: 5

            # Clock configuration
            # (Applies for compliance tests and feature tests!)
            cfg_sys_clk_period: 10 ns

            # Number of frames used from each dataset, 1000 means whole dataset
            # These take really long time, so we run only few frames here!
            reference_iterations: 10

        source_list_files:
            - tb_ctu_can_fd_rtl

    ###############################################################################################
    # Nightly configuration
    ###############################################################################################
    tb_rtl_test_nightly:
        top_entity: ctu_can_fd_tb.tb_top_ctu_can_fd
        test_list_file: test/tlf_nightly.yml
        generics:
            # Test-bench configuration
            #log_level: info
            #enable_psl: true
            #functional_coverage_report: true
            #code_coverage: true
            #error_tolerance: 0
            #randomize: true
            #seed: 0
            #debug: true
            iterations: 1
            timeout: 100 ms

            # If true, use Vunits report package in Main testbench.
            # If false, uses own implementation.
            vunit_report_pkg: true

            # DUT generics
            rx_buffer_size: 64
            txt_buffer_count: 8
            sup_filtA: true
            sup_filtB: true
            sup_filtC: true
            sup_range: true
            sup_traffic_ctrs: true
            sup_parity: true
            target_technology: 0 # C_TECH_ASIC

            # DUT Bit timing settings
            # Applies for compliance tests and feature tests!
            cfg_brp: 2
            cfg_prop: 5
            cfg_ph_1: 7
            cfg_ph_2: 7
            cfg_sjw: 5

            cfg_brp_fd: 1
            cfg_prop_fd: 5
            cfg_ph_1_fd: 5
            cfg_ph_2_fd: 5
            cfg_sjw_fd: 3

            # Clock configuration
            cfg_sys_clk_period: 10 ns

            # Number of frames used from each dataset, 1000 means whole dataset
            # With unified TB architecture, these run quite long! Therefore we
            # run only sub-set. Then agent will randomize starting position within
            # the data-set, so all-together we pick random:
            #   50 * 10 = 500 (out of 10000) frames
            reference_iterations: 50

        source_list_files:
            - tb_ctu_can_fd_rtl

check_severity: error

license_wait: true
