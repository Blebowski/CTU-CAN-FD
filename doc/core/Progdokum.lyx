#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage{colortbl}
\definecolor{gray}{RGB}{230,230, 230}
\usepackage{subcaption}
\usepackage{cprotect}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing other 1.1
\use_hyperref true
\pdf_author "Ille Ondrej"
\pdf_subject "CAN FD IP function"
\pdf_keywords "CAN, Flexible data rate,"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\headheight 2cm
\secnumdepth 2
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% number the pages at the beginning in roman
\end_layout

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Number chapters as 
\begin_inset Quotes eld
\end_inset

1.
 xxx
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

Chapter 1
\backslash
nxxx
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout


\backslash
makeatletter
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
@makechapterhead#1{%
\end_layout

\begin_layout Plain Layout

  
\backslash
vspace*{50
\backslash
p@}%
\end_layout

\begin_layout Plain Layout

  {
\backslash
parindent 
\backslash
z@ 
\backslash
raggedright 
\backslash
normalfont
\end_layout

\begin_layout Plain Layout

    
\backslash
ifnum 
\backslash
c@secnumdepth >
\backslash
m@ne
\end_layout

\begin_layout Plain Layout

      
\backslash
if@mainmatter
\end_layout

\begin_layout Plain Layout

        %
\backslash
huge
\backslash
bfseries 
\backslash
@chapapp
\backslash
space 
\backslash
thechapter
\end_layout

\begin_layout Plain Layout

        
\backslash
Huge
\backslash
bfseries 
\backslash
@chapapp{} 
\backslash
thechapter.
\backslash
space%
\end_layout

\begin_layout Plain Layout

        %
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

        %
\backslash
vskip 20
\backslash
p@
\end_layout

\begin_layout Plain Layout

      
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
fi
\end_layout

\begin_layout Plain Layout

    
\backslash
interlinepenalty
\backslash
@M
\end_layout

\begin_layout Plain Layout

    
\backslash
Huge 
\backslash
bfseries #1
\backslash
par
\backslash
nobreak
\end_layout

\begin_layout Plain Layout

    
\backslash
vskip 40
\backslash
p@
\end_layout

\begin_layout Plain Layout

  }}
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
chaptername{}
\end_layout

\begin_layout Plain Layout


\backslash
makeatother
\end_layout

\end_inset


\end_layout

\begin_layout Title

\series bold
\size giant
\color black
CTU CAN
\noun on
 FD 
\begin_inset Newline newline
\end_inset

IP CORE
\noun default
\color inherit
 
\series default
\size default

\begin_inset Newline newline
\end_inset


\series bold
\size larger
\color black

\begin_inset VSpace bigskip
\end_inset


\size default
\noun on
Datasheet
\end_layout

\begin_layout Author
\begin_inset VSpace defskip
\end_inset

Czech Technical University in Prague
\begin_inset Newline newline
\end_inset

Faculty of Electrical Engineering
\begin_inset Newline newline
\end_inset

Department of Measurement
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Left Header

\size larger
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell multirow="3" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../pics/LEV.bmp
	lyxscale 20
	scale 9

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size larger
CTU CAN FD IP Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version 2.2, Commit:
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="1.5cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Author
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07-2015
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial version describing release 1.0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09-2016
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added test framework description.
 Updated document to cover latest description of CAN Core.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07-2018
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Updated register map description, external references to generated maps.
 Updated block diagrams.
 Updated test framework description.
 Updated Synthesis table.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Martin Jerabek
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10-2018
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added Linux driver description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12-2018
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added Register map block diagram after re-implementation of registers via
 Register map generator.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12-2018
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added CRC Wrapper.
 Extended CRC description.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Added TIMESTAMP_LOW, TIMESTAMP_HIGH registers.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
03-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Re-worked Prescaler.
 Removed 0x3 in bits 23:20 of address.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26-09-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Split functional descripion and register map from original document.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21-10-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clarify TXT buffer behaviour when node goes bus-off.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31-10-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clarify Bus-off behaviour aftet Start-up.
 Clarify that frame must be inserted to TXT Buffer before sending.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ondrej Ille
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18-11-2019
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clarify behaviour of Transmitter delay measurement.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% classis page numbering
\end_layout

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Format}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Throughout this datasheet following notations are kept:
\end_layout

\begin_layout Itemize
Common text is written with this font.
\end_layout

\begin_layout Itemize
Memory registers are always described with capital letters e.g.
 REGISTER or REGISTER [BIT_FIELD] to represent register or bit field within
 a register.
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This document provides functional description of CTU CAN FD, programmers
 model and parameters of CTU CAN FD.
 Internal architecture of CTU CAN FD is described in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Itemize
Vendor independent, VHDL RTL code for synthesis (compliant with VHDL 93).
\end_layout

\begin_layout Itemize
Designed to be compliant with ISO11898-1 2015.
\end_layout

\begin_layout Itemize
RX buffer FIFO of 32 - 4096 words (1-204 CAN frames with 64 byte of data).
\end_layout

\begin_layout Itemize
4 TXT buffers (1 CAN frame in each TXT buffer).
\end_layout

\begin_layout Itemize
32 bit slave memory interface (APB, AHB, RAM-like interface).
\end_layout

\begin_layout Itemize
Support of ISO and non-ISO CAN FD protocol.
\end_layout

\begin_layout Itemize
Timestamping and Time triggered transmission.
\end_layout

\begin_layout Itemize
Interrupts
\end_layout

\begin_layout Itemize
Test mode
\end_layout

\begin_layout Section
License
\end_layout

\begin_layout Standard
HW and test framework of CTU CAN FD IP core are published under MIT License:
\end_layout

\begin_layout Quote
Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Quote
The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Quote
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
\end_layout

\begin_layout Standard
Linux driver and low level driver are published under GPL v 2.0:
\end_layout

\begin_layout Quote
This program is free software; you can redistribute it and/or * modify it
 under the terms of the GNU General Public License as published by the Free
 Software Foundation; either version 2 of the License, or (at your option)
 any later version.
 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.
 See the GNU General Public License for more details.
 You should have received a copy of the GNU General Public License along
 with this program; if not, write to the Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
\end_layout

\begin_layout Section
Source code access
\end_layout

\begin_layout Standard
CTU CAN FD source code is available in CTU FEE GitLab repository at:
\end_layout

\begin_layout Standard
\begin_inset space \qquad{}
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
target "https://gitlab.fel.cvut.cz/canbus/ctucanfd_ip_core"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Block diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/BD_datasheet.pdf
	lyxscale 20
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CTU CAN FD block diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:block-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation parameters
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="10cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Units
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimum nominal time quanta
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimum data time quanta
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Information processing time
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimum time quanta
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input delay (
\begin_inset Formula $t_{input}$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System clock periods
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nominal bit rate prescaler range (BTR[BRP] register)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 - 255
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data bit rate prescaler range (BTR_FD[BRP_FD] register)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 - 255
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimal nominal bit time length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time quanta
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimal data bit time length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time quanta
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Implementation parameters
\begin_inset CommandInset label
LatexCommand label
name "tab: implementation-parameters"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Configuration parameters
\end_layout

\begin_layout Standard
CTU CAN FD can be used with different options when implemented on ASIC or
 FPGA.
 These parameters are then readable by SW.
 Related parameters are described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab: configuration-parameters"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter name
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rx_buffer_size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-4096.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size of RX buffer (number of 32bit words it can store).
 SW can read this value from RX_MEM_INFO[RX_BUFF_SIZE].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sup_filt_A
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true/false
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filter A is / is not present.
 When present, FILTER_STATUS[SFA] = 1.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sup_filt_B
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true/false
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filter B is / is not present.
 When present, FILTER_STATUS[SFB] = 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sup_filt_C
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true/false
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Filter C is / is not present.
 When present, FILTER_STATUS[SFC] = 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sup_range
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true/false
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Range fitler is / is not present.
 When present, FILTER_STATUS[SFR] = 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sup_traffic_ctrs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true/false
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Traffic counters are / are not present.
 Reading non-zero value from TX_COUNTER/ RX_COUNTER register after transmission/
reception of CAN frame indicates that traffic counters are present.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Configuration parameters
\begin_inset CommandInset label
LatexCommand label
name "tab: configuration-parameters"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Functional description
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Clock
\end_layout

\begin_layout Standard
CTU CAN FD operates with single clock which is called System clock.
 Each other timing parameter is derived from System clock.
 System clock frequency depends on system which is integrating CTU CAN FD.
\end_layout

\begin_layout Section
Reset
\end_layout

\begin_layout Standard
After power-up CTU CAN FD shall be reset either by HW reset (see 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

) or by Soft reset.
 Soft reset is executed by writing logic 1 to MODE[RST] register.
 If HW reset was issued to CTU CAN FD , CTU CAN FD shall not be accessed
 for duration of two clock periods of System clock.
 For example if CTU CAN FD System clock is 100 MHz, SW shall wait 20 ns
 after HW reset was released.
 If Soft reset is issued, no waiting is required.
\end_layout

\begin_layout Section
Time base
\end_layout

\begin_layout Standard
CTU CAN FD can have a time base available for Time triggered transmission
 or Timestamping of received frames.
 Availability of such time base depends on integration of CTU CAN FD into
 a system.
 If such a time base is available its value can be read from TIMESTAMP_H
 and TIMESTAMP_L registers.
\end_layout

\begin_layout Section
Operating modes
\end_layout

\begin_layout Standard
After reset, CTU CAN FD is disabled, it does not take part in communication
 on CAN bus (no transmission, reception, monitoring).
 Before CTU CAN FD is enabled, it must be configured as is explained in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CAN-bus-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Once it was configured, it can be enabled.
 CTU CAN FD is enabled by writing logic 1 to SETTINGS[ENA] bit.
 After it was written, CTU CAN FD starts bus integration and joins the bus
 communication after receiving 11 consecutive recessive bits.
 When CTU CAN FD joins the bus, it becomes error active (during integration
 it was bus off).
 At this moment CTU CAN starts communicating on the bus.
 The moment when CTU CAN FD joined the bus communication can be determined
 by FCS interrupt and subsequent probing of FAULT_STATE register.
 Basic operating modes of CTU CAN FD are shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CTU-CAN-FD-operating-modes"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_main_modes.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Operating modes
\begin_inset CommandInset label
LatexCommand label
name "fig:CTU-CAN-FD-operating-modes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When CTU CAN FD is error active, it takes part in CAN bus communication.
 If CTU CAN FD becomes error passive and later bus-off, it stops any communicati
on on CAN bus and waits before starting Reintegration until it receives
 Error counter reset command (writing logic 1 to COMMAND[ERCRST]).
 Upon this command, CTU CAN FD starts Reintegration.
 Reintegration lasts until CTU CAN FD detects 128 sequences of 11 consecutive
 recessive bits.
 After 128 such sequences, CTU CAN FD becomes error active again.
\end_layout

\begin_layout Standard
CTU CAN FD can be at any time disabled by writing logic 0 to SETTINGS[ENA]
 register.
 In this case, CTU CAN FD immediately stops communication on CAN bus and
 starts transmiting only recessive bits.
 It is recommended for CTU CAN FD not to be transmitting any frame at this
 time, as this would result in transmission of error frame by other nodes
 on CAN bus.
 Therefore SW driver operating on CTU CAN FD shall ensure that none of TXT
 buffers within CTU CAN FD is Ready, TX in progress or Abort in progress
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:CAN-frame-transmission"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Section
CAN bus configuration
\begin_inset CommandInset label
LatexCommand label
name "sec:CAN-bus-configuration"

\end_inset


\end_layout

\begin_layout Subsection
Bit rate
\end_layout

\begin_layout Standard
Bit rate on CAN bus is derived from System clock.
 Basic unit of time on CAN bus is time quanta.
 Time quanta is derived from System clock by dividing its frequency by bit
 rate prescaler.
 CTU CAN FD has separate prescaler for nominal bit rate time quanta (BTR[BRP])
 and data bit rate time quanta (BTR_FD[BRP_FD]).
 Bit rate on CTU CAN FD is configured by specifying Prop_Seg, Phase1_Seg
 and Phase2_Seg durations (as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:bit-time"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 These are specified separately for nominal and data bit rate in BTR and
 BTR_FD registers.
 These registers can be modified only when SETTINGS[ENA] = 0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Bit_time.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Bit time
\begin_inset CommandInset label
LatexCommand label
name "fig:bit-time"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
500 Kbit / 2 Mbit example
\end_layout

\begin_layout Standard
Common configuration of CAN bus within automotive industry is 500 Kbit in
 nominal bit rate and 2 Mbit in data bit rate.
 Following snippet shows example configuration assuming 100 Mhz System clock
 frequency with sample point in 80% of bit:
\end_layout

\begin_layout LyX-Code
#define CTU_CAN_FD_BASE 0x12000000
\end_layout

\begin_layout LyX-Code
#define BTR_ADDR CTU_CAN_FD_BASE+0x24
\end_layout

\begin_layout LyX-Code
#define BTR_FD_ADDR CTU_CAN_FD_BASE+0x28
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
uint32 btr;
\end_layout

\begin_layout LyX-Code
btr = (4 << 19);     // Time Quanta: 4
\end_layout

\begin_layout LyX-Code
btr |= 29;           // Prop: 29
\end_layout

\begin_layout LyX-Code
btr |= (10 << 7);    // Phase 1: 10
\end_layout

\begin_layout LyX-Code
btr |= (10 << 13);   // Phase 2: 10
\end_layout

\begin_layout LyX-Code
btr |= (3 << 29);    // SJW: 3
\end_layout

\begin_layout LyX-Code
CAN_write_32(BTR_ADDR, btr); // (29+10+10+1)*4=200*10ns=2us
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
uint32 btr_fd;
\end_layout

\begin_layout LyX-Code
btr_fd = (1 << 19);     // Time Quanta: 1
\end_layout

\begin_layout LyX-Code
btr_fd |= 29;           // Prop: 29
\end_layout

\begin_layout LyX-Code
btr_fd |= (10 << 7);    // Phase 1: 10
\end_layout

\begin_layout LyX-Code
btr_fd |= (10 << 13);   // Phase 2: 10
\end_layout

\begin_layout LyX-Code
btr_fd |= (3 << 29);    // SJW: 3
\end_layout

\begin_layout LyX-Code
CAN_write_32(BTR_FD_ADDR, btr_fd); // (29+10+10+1)*1=50*10ns=0.5us
\end_layout

\begin_layout Subsection
Transmitter delay
\end_layout

\begin_layout Standard
Transmitter delay is time it takes to a value transmited by CTU CAN FD on
 can_tx output to propagate back to can_rx input as it is visualized in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:transmitter-delay"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This delay involves propagation of signal to physical layer transceiver,
 delay of transceiver itself and delay from transceiver to can_rx input
 of CTU CAN FD.
 Transmitter delay is measured when CTU CAN FD transmitts CAN FD frame (regardle
s of the fact if bit rate is switched in current frame) on recessive to
 dominant edge between FDF (EDL) and r0 bits.
 Transmitter delay is readable after its measurement from TRV_DELAY register.
 Transmitter delay is measured in periods of System clock.
\end_layout

\begin_layout Description
Note Transmitter delay measurement includes input delay of CTU CAN FD (which
 is 2 clock cycles).
 CTU CAN FD contains compensation mechanism for this delay on Transmitter
 delay measurement which corrects it to one clock cycle.
 Therefore measured Transmitter delay will be always always as if Transmitter
 delay is ceiled to high value.
 (E.g.
 can_tx to can_rx delay of 1 ns will be measured as 1, delay of 11 ns will
 be measured as 2 and so on).
\end_layout

\begin_layout Description
Note Transmitter delay measurement is saturated to 127 System clock cycles.
 If the delay between can_tx and can_rx is longer, only 127 clock cycles
 will be measured.
 When system clock frequency is 100 Mhz, this gives 1,27 us of maximal measurabl
e transmitter delay.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Transmitter_delay.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Transmitter delay
\begin_inset CommandInset label
LatexCommand label
name "fig:transmitter-delay"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Secondary sampling point
\end_layout

\begin_layout Standard
Secondary sampling point is used by transmitters during data bit rate to
 detect bit errors.
 Its position is configured as delay from start of bit time (Sync_Seg) in
 multiples of System clock (NOT time quanta!).
 Secondary sampling point position can be fixed, given by Transmitter delay,
 or it can be disabled as is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:secondary-sampling-point"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 When Secondary sampling point is disabled, regular sampling point as configured
 by BRP_FD register is used by transmitters during data bit rate for bit
 error detection.
 Secondary sampling point position is configurable between 0 - 127.
 If Secondary sampling point is configured to more than 127 (e.g.
 as result of large measured Transmitter delay), it is saturated to 127.
 Note that since CTU CAN FD input delay is 2 System clock periods (minimum
 time quanta), position of Secondary sampling point shall be configured
 to at least 2 to compensate its own input delay.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/SSP_logic.pdf
	lyxscale 20
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Secondary sampling point
\begin_inset CommandInset label
LatexCommand label
name "fig:secondary-sampling-point"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CAN FD support
\end_layout

\begin_layout Standard
CTU CAN FD supports both ISO and non-ISO versions of CAN FD protocol.
 When ISO protocol version is chosen, CTU CAN FD is conformant to ISO11898-1
 2015.
 When NON ISO version is chosen, CTU CAN FD is conformant to CAN FD specificatio
n 1.0.
 Selection between these two versions is done via SETTINGS[NISOFD] register.
 This register shall be modified only when SETTINGS[ENA] = 0.
\end_layout

\begin_layout Standard
CTU CAN FD can be configured to support only CAN 2.0 protocol.
 When MODE[FDE] = 0, CTU CAN FD can't receive CAN FD frames and transmitts
 error frames as response to CAN FD frames.
 When MODE[FDE] = 0, SW shall not insert CAN FD frames for transmission
 as this will also result in transmission of error frames.
\end_layout

\begin_layout Subsection
Minimum bit time
\end_layout

\begin_layout Standard
System clock period is equal to minimal time quanta.
 Therefore it affects minimum bit rate achievable on CAN bus.
 When bit rate prescaler is equal to 1, minimal duration of Phase2_Seg achievabl
e by CTU CAN FD is 2 time quanta (value of information processing time).
 Minimal duration of Sync_Seg + Prop_Seg + Phase1_Seg is also 2 time quanta.
 This can be achieved by: Prop_Seg = 0 and Phase1_Seg = 1, or Prop_Seg =
 1 and Phase1_Seg = 0.
 Such configuration is possible for both nominal and data bit rate.
 Note that this is absolute maximum rating, and therefore allows very little
 flexibility in bit rate configuration.
 It is recommended to use such System clock frequency that nominal bit time
 will contain at least 8 time quanta and data bit time will contain at least
 5 time quanta.
\end_layout

\begin_layout Standard
As an example, when nominal bit rate is 250 Kbit/s, data bit rate is 1 Mbit/s,
 minimal possible System clock frequency is 4 MHz.
 It is however recommended to use at least 5 MHz in such case (5 clock cycle
 per one data bit time).
 To achieve sufficient flexibility in bit rate / sample point position it
 is rather better to use 8 MHz System clock frequency.
\end_layout

\begin_layout Section
CAN frame transmission
\begin_inset CommandInset label
LatexCommand label
name "sec:CAN-frame-transmission"

\end_inset


\end_layout

\begin_layout Standard
CAN frames are transmitted by CTU CAN FD from TXT buffers.
 CTU CAN FD contains 4 TXT buffers.
 Each TXT buffer can be in one of states as described in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:txt-buffer-user"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 State of each TXT buffer can be read from TX_STATUS register.
 TXT buffer state can be controled by SW via TX_COMMAND register and three
 types of commands can be issued:
\end_layout

\begin_layout Description
Set
\begin_inset space ~
\end_inset

ready Requests TXT buffer to move to Ready state.
\end_layout

\begin_layout Description
Set
\begin_inset space ~
\end_inset

abort Requests TXT buffer to move to Aborted or Abort in progress state.
\end_layout

\begin_layout Description
Set
\begin_inset space ~
\end_inset

empty Requests TXT buffer to move to Empty state.
\end_layout

\begin_layout Standard
Each TXT buffer stores single CAN frame.
 TXT buffer is write only (CAN frame can't be read back), and is accessible
 only when TXT buffer is in Empty, TX OK, TX failed or Aborted states.
 CAN frame can be stored to TXT buffers via TXT Buffer 1 - TXT Buffer 4
 memory regions described in Chapter 3.
 TXT buffers support only 32 bit access (8 and 16 bit accesses are not supported
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_TXT_Buffer_user.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
TXT buffer states
\begin_inset CommandInset label
LatexCommand label
name "fig:txt-buffer-user"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When SW stores CAN frame to TXT buffer it issues Set ready command to this
 TXT buffer to request transmission of CAN frame from this TXT buffer.
 TXT buffer moves to Ready state and in this state CTU CAN FD can transmitt
 CAN frame from this TXT buffer.
 When CTU CAN FD starts transmission from this TXT buffer, it moves to TX
 in progress state.
 CTU CAN FD starts transmission from TXT buffer which is in Ready state
 in third bit of intermission when it samples dominant bit (SOF bit is skipped
 in this case), or during bus idle.
 When CTU CAN FD is error passive and was transmitter of previous frame,
 it does not start transmission from TXT buffer for 8 bits after transmission
 of previous frame (transmission is suspended).
 When CTU CAN FD transmitts CAN frame succesfully (no arbitration lost,
 no error frame), TXT buffer moves to TX OK state.
 If an error frame occurs or arbitration is lost, TXT buffer moves to Ready
 state and transmission is attempted again in nearest intermission or bus
 idle\SpecialChar endofsentence

\end_layout

\begin_layout Subsection
TXT buffer selection
\end_layout

\begin_layout Standard
If there are multiple TXT buffers in Ready state, CTU CAN FD selects highest
 priority TXT buffer in Ready state and transmitts CAN frame from this TXT
 buffer.
 Priority of TXT buffers is configured by SW via TX_PRIORITY register.
 If two TXT buffers have equal priority, TXT buffer with lower index is
 selected.
\end_layout

\begin_layout Subsection
Time triggered transmission
\end_layout

\begin_layout Standard
CAN frame in TXT buffer contains time when it should be transmitted (TIMESTAMP_L
_W, TIMESTAMP_U_W).
 A frame from highest priority TXT buffer will be transmitted only when
 current time reaches value of time stored in these memory words as is visualize
d in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:time-triggered-transmission"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If TXT buffer is Ready and moment in time when frame should be transmitted
 did not pass yet, CTU CAN FD waits until this condition is satisfied.
 If during this time another node on CAN bus starts transmitting a frame,
 CTU CAN FD becomes receiver of such frame.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/TX_Time.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time triggered transmission
\begin_inset CommandInset label
LatexCommand label
name "fig:time-triggered-transmission"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If CAN frame shall be transmitted as soon as possible, SW shall store all
 zeroes to these memory words.
 Note that time of transmission is always considered only from highest priority
 TXT buffer in Ready state, therefore at any moment TXT buffer priority
 is considered first before time transmission.
 If during waiting for transmission time of CAN frame in e.g.
 TXT buffer 1 another TXT buffer with higher priority becomes Ready, waiting
 is aborted and new frame is selected.
\end_layout

\begin_layout Subsection
Retransmitt limitation
\end_layout

\begin_layout Standard
CTU CAN FD supports limiting number of retransmission from a single TXT
 buffer.
 Retransmitt limitation is enabled by writing logic 1 to SETTINGS[RTRLE].
 Number of retransmission is configured in SETTINGS[RTRTH].
 First attempt to transmitt CAN frame does not count as retransmission.
 Possible configuration options are shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:retransmitt-counter-configurations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15text%">
<column alignment="left" valignment="top" width="17text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SETTINGS [RTRTH]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SETTINGS [RTRLE]
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Behaviour
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{gray}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted without any limitation until unit turns
 bus off.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted only once, there are no retransmission attempts
 after first failed transmission (so called one shot mode).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 - 15
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frame transmission is attempted SETTINGS[RTRTH] + 1 times (initial transmission
 + SETTINGS[RTRTH] retransmissions).
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Retransmitt limitation configuration
\begin_inset CommandInset label
LatexCommand label
name "tab:retransmitt-counter-configurations"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If SETTINGS[RTRTH] consecutive retransmission are not succesfful (error
 frame or arbitration lost) from single TXT buffer, this TXT buffer moves
 to TX failed state.
 If TXT buffer used for transmission of CAN frame is different than previous
 TXT buffer (e.g it is picked due to higher priority), internal counter of
 retransmissions is erased and new frame has again SETTINGS[RTRTH]+1 transmissio
n attempts.
 If CTU CAN FD returns to transmission from original TXT buffer, it does
 not remember previous number of transmission attempts and again attempts
 to transmitt can frame SETTINGS[RTRTH]+1 times.
 If TXT buffer which is currently used for transmission moves to Aborted
 state, internal counter of retransmissions is also erased.
 If such TXT buffer moves to Ready state again, CTU CAN FD attempts to transmitt
 it SETTINGS[RTRTH]+1 times.
\end_layout

\begin_layout Subsection
Abort
\end_layout

\begin_layout Standard
When CTU CAN FD previously requested transmission of CAN frame by issuing
 Set ready command, it can request aborting transmission of such a frame
 by Set abort command.
 If TXT buffer is still in Ready when it receives Set abort command (transmissio
n did not started yet), it moves to Aborted state immediately.
 If TXT buffer is in TX in progress, it moves to Abort in progress state.
 In such a case, it will move to Aborted state upon nearest error frame
 or arbitration lost.
 Note that when TXT buffer is in Abort in progress state, it can move to
 TX OK state if current transmission succeeds, or to TX failed state if
 retransmitt limit was reached.
\end_layout

\begin_layout Subsection
Sample code
\end_layout

\begin_layout LyX-Code
#define CTU_CAN_FD_BASE 0x12000000
\end_layout

\begin_layout LyX-Code
#define TX_COMMAND_ADDR CTU_CAN_FD_BASE+0x74
\end_layout

\begin_layout LyX-Code
#define TXT_BUFFER_1_BASE CTU_CAN_FD_BASE+0x100
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
// Insert CAN frame to TXT buffer 1
\end_layout

\begin_layout LyX-Code
uint32_t frame_format_word = 0;
\end_layout

\begin_layout LyX-Code
frame_format_word |= 4;                               // DLC = 4
\end_layout

\begin_layout LyX-Code
frame_format_word |= (1 << 7);                        // CAN FD Frame
\end_layout

\begin_layout LyX-Code
frame_format_word |= (1 << 9);                        // Switch bit-rate
\end_layout

\begin_layout LyX-Code
CAN_write_32(TXT_BUFFER_1_BASE, frame_format_word);   // Store frame format
 word
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
uint32_t id_word = (55 << 18);                        // Identifier: 55
\end_layout

\begin_layout LyX-Code
CAN_write_32(TXT_BUFFER_1_BASE+0x4, id_word);         // Store frame format
 word
\end_layout

\begin_layout LyX-Code
CAN_write_32(TXT_BUFFER_1_BASE+0x8, 1000);
\end_layout

\begin_layout LyX-Code
CAN_write_32(TXT_BUFFER_1_BASE+0xC, 0);               // Transmitt at time
 1000
\end_layout

\begin_layout LyX-Code
CAN_write_32(TXT_BUFFER_1_BASE+0x10, 0xAABBCCDD);     // Data: 0xAA 0xBB
 0xCC 0xDD
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
// Issue Set ready command
\end_layout

\begin_layout LyX-Code
uint32_t command = 0;
\end_layout

\begin_layout LyX-Code
command |= 0x2;                                       // Set Ready command
\end_layout

\begin_layout LyX-Code
command |= (1 << 8);                                  // Choose TXT Buffer
 1
\end_layout

\begin_layout LyX-Code
CAN_write_32(TX_COMMAND_ADDR, command);               // Issue the command
\end_layout

\begin_layout Subsection
Notes
\end_layout

\begin_layout Description
Note
\begin_inset space ~
\end_inset

1 When CTU CAN FD is started by writing SETTINGS[ENA] = '1', it is still
 bus-off during integration to the CAN bus.
 If during this time Set ready command is sent to TXT buffer, TXT buffer
 immediately moves to Aborted state (since node is bus-off and all TXT buffers
 in TX ready move to Aborted when CTU CAN FD is bus-off).
 SW shall wait until node is Error active (either polling or via FCS Interrupt)
 before issuing Set Ready command to any TXT buffer.
\end_layout

\begin_layout Description
Note
\begin_inset space ~
\end_inset

2 TXT buffers are not initialized, nor reset.
 Therefore, before issuing Set ready command, SW shall fill according TXT
 buffer with valid CAN frame for transmission.
\end_layout

\begin_layout Description
Note
\begin_inset space ~
\end_inset

3 CTU CAN FD only transmitts only reactive Overload frames.
 There are no internal conditions in CTU CAN FD which would cause transmission
 of Overload frame.
\end_layout

\begin_layout Section
CAN frame reception
\end_layout

\begin_layout Standard
CTU CAN FD contains single RX buffer into which received CAN frames are
 stored.
 Size of RX buffer is measured in 32-bit words and CAN be read from RX_MEM_INFO
 register.
 RX buffer is organized like a FIFO.
 CAN frame is stored to RX buffer when it is received successfully on CAN
 bus (no error frames occurred).
 CAN frame is read by SW from RX buffer via RX_DATA register.
 Single read from RX_DATA register reads one memory word from RX buffer
 and automatically increments read pointer within the RX buffer.
\end_layout

\begin_layout Standard
CAN frame format within RX buffer is described in Chapter 3 and it is visualized
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rx-buffer-frame-visualization"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 CAN frame within RX buffer can span from 4 to 20 memory words.
 Metadata, Idenitifier and Timestamp words are present for each received
 CAN frame.
 Additional data word is present for each 4 bytes of data field in received
 CAN frame.
 Therefore remote CAN frames and CAN frames with no data field span 4 memory
 words.
 CAN frames with 4 data bytes span 5 memory words, CAN frames with 8 data
 bytes span 6 memory words and CAN FD frames with 64 data bytes span 20
 memory words.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/RX_Buffer_layout.pdf
	lyxscale 20
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RX buffer
\begin_inset CommandInset label
LatexCommand label
name "fig:rx-buffer-frame-visualization"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Frame count
\end_layout

\begin_layout Standard
RX buffer contains counter of CAN frames within the buffer.
 This counter can be read from RX_STATUS[RXFRCE] register.
 Counter is incremented when frame is stored to RX buffer and decremented
 when last memory word of a frame is read from RX buffer.
\end_layout

\begin_layout Subsection
RX buffer memory
\end_layout

\begin_layout Standard
RX buffer memory provides following status information:
\end_layout

\begin_layout Itemize
Number of free memory words, readble from RX_MEM_INFO[RX_MEM_FREE].
\end_layout

\begin_layout Itemize
Write pointer position, readable from RX_POINTERS[RX_WPP].
\end_layout

\begin_layout Itemize
Read pointer position, readable from RX_POINTERS[RX_RPP].
\end_layout

\begin_layout Subsection
RX buffer empty / full
\end_layout

\begin_layout Standard
RX buffer which contains no stored CAN frames is empty.
 In such state RX_STATUS[RXE]=1.
 RX buffer which has all its memory words occupied by CAN frames, it is
 full.
 In such state RX_STATUS[RXF]=1.
 Note that if RX buffer has e.g.
 2 free memory words it is not full, however not even 4 word remote frame
 would not fit into the buffer.
\end_layout

\begin_layout Subsection
Overrun
\end_layout

\begin_layout Standard
If during reception of CAN frame there is not enough free memory words in
 RX buffer to store currently received CAN frame, Overrun occurs and this
 frame is not stored (RX buffer FIFO has overflown).
 In this situation Overrun flag is set.
 Overrun flag is sticky (remains set until it is cleared) and can be read
 from STATUS[DOR].
 Overrun flag is cleared by writing logic 1 to COMMAND[CDO].
\end_layout

\begin_layout Subsection
Flush
\end_layout

\begin_layout Standard
RX buffer can be flushed (Release RX buffer) by writing logic 1 to COMMAND[RRB]
 bit.
 When this command is applied, content of RX buffer is erased, read and
 write pointers are set to 0 and frame counter is set to 0.
 RX buffer is as if no frame was received to it yet.
 If this command is issued during CAN frame reception, this frame is also
 not stored to RX buffer.
\end_layout

\begin_layout Subsection
Frame filtering
\end_layout

\begin_layout Standard
Received CAN frames are filtered by HW filters called Frame filters.
 There are two types of filters: Bit filter and Range filter.
 There are three instances of Bit filter (A,B,C) and one instance of Range
 filter.
 Received CAN frame is stored to RX buffer if it passes at least one filter
 (logical OR).
 To apply Frame filters on received CAN frames, Acceptance filter mode must
 be set.
 Acceptance filter mode is set when MODE[ACF]=1.
 This bit shall be changed only when SETTINGS[ENA]=0.
 When Acceptance filter mode is not set, each received CAN frame is stored
 to RX buffer.
\end_layout

\begin_layout Standard
Each filter can be selectively configured to accept only certain types on
 CAN frame types (CAN 2.0 frame / CAN FD frame) and Identifier types (frame
 with Base identifier only, frame with Base + Extended identifier).
 Such a configuration is available in FILTER_CONTROL register.
 If combination of received frame type and identifier type is not selected
 in FILTER_CONTROL register, received CAN frame is not stored in RX buffer.
 Filter is disabled by setting all its according bits in FILTER_CONTROL
 to 0.
\end_layout

\begin_layout Subsubsection
Bit filter
\end_layout

\begin_layout Standard
Bit filter determines if received CAN frame identifier is equal to predefined
 identifier in FILTER_X_VALUE register (X=A,B,C based on filter instance).
 Only bits given by filter mask in FILTER_X_MASK register are compared (logic
 1 in according bit means that this bit is compared).
 When received identifier is equal to identifier configured in bit filter,
 received CAN frame is stored in RX buffer.
 Behaviour of Bit filter can be described by following equation:
\end_layout

\begin_layout Standard
\noindent
\align center
(FILTER_X_VALUE & FILTER_X_MASK) == (Received CAN Identifier & FILTER_X_MASK)
\end_layout

\begin_layout Subsubsection
Range filter
\end_layout

\begin_layout Standard
Range filter determines if received CAN frame identifier is in certain decimal
 range.
 Lower threshold of this decimal range is given by FILTER_RAN_LOW and upper
 threshold is given by FILTER_RAN_HIGH register.
 If received CAN frame ID is in this range, CAN frame is stored to RX buffer.
 Behaviour of Range filter can be described by following equation:
\end_layout

\begin_layout Standard
\noindent
\align center
FILTER_RAN_LOW <= Received CAN Identifier <= FILTER_RAN_HIGH
\end_layout

\begin_layout Subsection
Sample code
\end_layout

\begin_layout LyX-Code
#define CTU_CAN_FD_BASE 0x12000000
\end_layout

\begin_layout LyX-Code
#define RX_DATA_ADDR CTU_CAN_FD_BASE+0x6C
\end_layout

\begin_layout LyX-Code
#define RX_STATUS_ADDR CTU_CAN_FD_BASE+0x68
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
// Poll on RX Buffer until there is a frame in it
\end_layout

\begin_layout LyX-Code
uint32_t rx_status = CAN_read_32(RX_STATUS_ADDR);
\end_layout

\begin_layout LyX-Code
while (rx_status & 0x1 == 0){
\end_layout

\begin_layout LyX-Code
    rx_status = CAN_read_32(RX_STATUS_ADDR);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
// Read frame from RX buffer
\end_layout

\begin_layout LyX-Code
uint8_t data[64];
\end_layout

\begin_layout LyX-Code
uint32_t tmp;
\end_layout

\begin_layout LyX-Code
uint32_t ffw = CAN_read_32(RX_DATA_ADDR);
\end_layout

\begin_layout LyX-Code
uint32_t id = CAN_read_32(RX_DATA_ADDR);
\end_layout

\begin_layout LyX-Code
uint32_t ts_l = CAN_read_32(RX_DATA_ADDR);
\end_layout

\begin_layout LyX-Code
uint32_t ts_h = CAN_read_32(RX_DATA_ADDR);
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout LyX-Code
uint32_t rwcnt = (ffw >> 11) & 0x1F;
\end_layout

\begin_layout LyX-Code
if (rwcnt > 0){
\end_layout

\begin_layout LyX-Code
    for(int i = 0; i < rwcnt; i++){
\end_layout

\begin_layout LyX-Code
        tmp = CAN_read_32(RX_DATA_ADDR);
\end_layout

\begin_layout LyX-Code
        data[i*4] = tmp & 0xFF;
\end_layout

\begin_layout LyX-Code
        data[i*4+1] = (tmp >> 8) & 0xFF;
\end_layout

\begin_layout LyX-Code
        data[i*4+2] = (tmp >> 16) & 0xFF;
\end_layout

\begin_layout LyX-Code
        data[i*4+3] = (tmp >> 24) & 0xFF;
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Section
Fault confinement
\end_layout

\begin_layout Standard
Fault confinement state of CTU CAN FD is readable from FAULT_STATE register.
 Fault confinement state transition diagram is displayed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fault-confinement"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Fault confinement counters are readable from REC and TEC registers.
 These counters correspond to transmitt error counter and receive error
 counter as defined in ISO11898-1.
 CTU CAN FD additionally contains counters distigushing between errors detected
 in nominal bit rate and data bit rate.
 Nominal bit rate error counter is readable from ERR_NORM register and it
 is incremented by 1 due to each error detected during nominal bit-rate.
 Data bit rate error counter is readable from ERR_FD register and it is
 incremented by 1 due to each error detected during data bit-rate.
\end_layout

\begin_layout Standard
All four counters (REC, TEC, ERR_NORM, ERR_FD) can be manipulated by SW.
 As this feature directly affects compliance of the device with ISO11898-1,
 this is only allowed when MODE[TSTM] = 1.
 All counters can be set from SW via CTR_PRES register.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/FSM_fault_confinement.pdf
	lyxscale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fault confinement
\begin_inset CommandInset label
LatexCommand label
name "fig:fault-confinement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Interrupts
\end_layout

\begin_layout Standard
CTU CAN FD Interrupt sources are described within this chapter.
 Each interrupt has three possible features:
\end_layout

\begin_layout Itemize
Interrupt mask - Set by INT_MASK_SET, cleared by INT_MASK_CLR.
\end_layout

\begin_layout Itemize
Interrupt enable - Set by INT_ENA_SET, cleared by INT_ENA_CLR.
\end_layout

\begin_layout Itemize
Interrupt status - Set by HW upon event occurence, cleared by writing to
 INT_STAT.
\end_layout

\begin_layout Standard
Relationship of these three features is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:interrupts"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Interrupt status is set when a certain condition is met within CTU CAN
 FD.
 In order for Interrupt status to be set, its corresponding bit of Interrupt
 mask must be 0 (interrupt is unmasked).
 If Interrupt status is in logic 1 and corresponding interrupt is enabled
 Interrupt is fired.
 Interrupt status can be read from CTU CAN FD via INT_STAT register.
 Note that when interrupt status is about to be set at the same moment as
 it is being cleared by writing to INT_STAT, interrupt remains set.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename ../pics/Visio_generated/Interrupt_single.pdf
	lyxscale 20
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Interrupts
\begin_inset CommandInset label
LatexCommand label
name "fig:interrupts"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Frame transmission and reception
\end_layout

\begin_layout Standard
When CTU CAN FD transmitts CAN frame succesfully (no error frame until the
 end of EOF) INT_STAT[TXI] bit is set.
 When CTU CAN FD receives CAN frame successfully (no error frame until one
 bit before the end of EOF), INT_STAT[RXI] bit is set.
\end_layout

\begin_layout Subsection
Fault confinement
\end_layout

\begin_layout Standard
When Transmitt error counter (TEC) or Receive error counter (REC) are equal
 to, or higher than EWL register INT_STAT[EWLI] is set.
 When Fault confinement state of CTU CAN FD changes INT_STAT[FCSI] is set.
 This bit is set upon any Fault confinement state change (even bus off to
 error active).
\end_layout

\begin_layout Subsection
TXT buffers and RX buffer
\end_layout

\begin_layout Standard
When Overrun occurs on RX buffer INT_STAT[DOI] is set (Data overrun interrupt).
 When RX buffer is full INT_STAT[RXFI] is set.
 When there is at least one CAN frame stored in RX buffer (RX buffer is
 not empty) INT_STAT[RBNEI] is set.
 When any TXT buffer moves from Ready, TX in progress or Abort in Progress
 states to any of TX OK, Aborted or TX failed states INT_STAT[TXBHCI] is
 set.
\end_layout

\begin_layout Subsection
Error and Overload frame
\end_layout

\begin_layout Standard
When Error frame transmission is started INT_STAT[BEI] is set.
 When overload frame transmission is started INT_STAT[OFI] is set.
\end_layout

\begin_layout Subsection
Other
\end_layout

\begin_layout Standard
When bit rate on CAN bus is switched INT_STAT[BSI] is set.
 When arbitration is lost INT_STAT[ALI] is set.
\end_layout

\begin_layout Section
Special modes
\end_layout

\begin_layout Subsection
Loopback mode
\end_layout

\begin_layout Standard
In Loopback mode CTU CAN FD receives any CAN frame that it transmitts.
 Any CAN frame transmitted from any of TXT buffers will be also stored to
 RX buffer when its transmission is successfull.
 Note that altough CTU CAN FD stores its own transmitted frame to RX buffer
 it still acts as a transmitter, therefore it does not acknowledge its own
 frame! For succesfull transmission, the frame must be acknowledged by other
 node on CAN bus.
 Loopback mode is set when MODE[LOM]=1.
 MODE[LOM] shall be only changed when SETTINGS[ENA]=0.
\end_layout

\begin_layout Subsection
Self test mode
\end_layout

\begin_layout Standard
In self test mode CTU CAN FD considers transmitted frame valid even if does
 not receive dominant bit during ACK slot.
 This mode can be used along with loopback mode to verify operation of CTU
 CAN FD when it is a single node on a bus.
 Self test mode is set when MODE[STM]=1.
\end_layout

\begin_layout Subsection
Acknowledge forbidden mode
\end_layout

\begin_layout Standard
In Acknowledge forbidden mode when CTU CAN FD is receiver of CAN frame it
 does not transmitt dominant bit during ACK slot even if received CRC matches
 calculated CRC.
 Acknowledge forbidden mode is set when MODE[ACF] = 1.
\end_layout

\begin_layout Subsection
Listen only mode
\end_layout

\begin_layout Standard
In Listen only mode, CTU CAN FD does not transmitt any frames it only receives
 CAN frames.
 If CAN frame is inserted to TXT buffer and TXT buffer moves to Ready, it
 will not be transmitted and TXT buffer will remain in Ready.
 If CTU CAN FD is a receiver during Listen only mode, it also does not transmitt
 any dominant bit on the bus.
 If dominant bit shall be transmitted to the bus (e.g.
 ACK or error frame), it is re-routed internally so that CTU CAN FD would
 receive this bit but other nodes on CAN bus does not see this dominant
 bit.
\end_layout

\begin_layout Subsection
Test mode
\end_layout

\begin_layout Standard
CTU CAN FD has Test mode which is active when MODE[TSTM] = 1.
 In Test mode CTU CAN FD has following features:
\end_layout

\begin_layout Itemize
ERP register is writable, therefore threshold for transition from error
 active to error passive state is configurable.
\end_layout

\begin_layout Itemize
EWL register is writable, therefore threshold for firing INT[EWLI] is configurab
le.
\end_layout

\begin_layout Itemize
CTR_PRES register is writable, therefore all error counters can be changed
 from SW.
\end_layout

\begin_layout Section
Other features
\end_layout

\begin_layout Subsection
Error code capture
\end_layout

\begin_layout Standard
CTU CAN FD contains Error code capture register.
 This register stores type and position of last error on CAN bus which caused
 transmission of error frame.
 Error code capture is updated in sample point of a bit where error was
 detected.
 Error code capture is readable via ERR_CAPT register.
\end_layout

\begin_layout Subsection
Arbitration lost capture
\end_layout

\begin_layout Standard
CTU CAN FD contains Arbitration lost capture register (ALC).
 This register stores position within CAN arbitration field on which CTU
 CAN FD last time lost arbitration.
\end_layout

\begin_layout Subsection
Traffic counters
\end_layout

\begin_layout Standard
CTU CAN FD can measure CAN frames transmitted, received on CAN bus.
 Upon every succesfully transmitted CAN frame, TX_COUNTER register is incremente
d by 1.
 Upon every successfully received CAN frame, RX_COUNTER register is incremented
 by 1.
 TX_COUNTER register can be cleared by writing logic 1 to COMMAND[TXFCRST].
 RX_COUNTER register can be cleared by writing logic 1 to COMMAND[RXFCRST].
 When CTU CAN FD is in Loopback mode and own transmitted frame is stored
 to RX buffer, RX_COUNTER is also incremented.
\end_layout

\begin_layout Subsection
Debug register
\end_layout

\begin_layout Standard
CTU CAN FD contains debug register (DEBUG_REGISTER) which can be used to
 determine which part of CAN frame is currently being transmitted / received.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "registerMap.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "CANFrameFormat.lyx"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

CTU CAN FD, System architecture.
\end_layout

\end_body
\end_document
